import os
from django.core.wsgi import get_wsgi_application
from telebot import TeleBot, types

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è DJANGO_SETTINGS_MODULE
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'stsproject.settings')

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django
from django import setup

setup()

# –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ –∏ –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ Django
from goodsapp.models import Orders, Products

# Your Telegram bot token
TOKEN = '7902068127:AAFs6JQKHllInr0ebRzHEJtZ8gpDCs-ccvs'

bot = TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
user_data = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_list_orders = types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
    button_choose_order = types.KeyboardButton("üõí –í—ã–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑")

    markup.add(button_list_orders, button_choose_order)

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:', reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
@bot.message_handler(func=lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
def list_orders_message(message):
    orders = Orders.objects.all()
    message_text = '–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n'

    if orders.exists():
        for order in orders:
            message_text += f"{order.name} - {order.date}\n"
    else:
        message_text = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."

    bot.send_message(message.chat.id, message_text)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
@bot.message_handler(func=lambda message: message.text == "üõí –í—ã–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑")
def choose_order_message(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞:")
    user_data[message.chat.id] = {'waiting_for_order': True}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –∑–∞–∫–∞–∑–∞
@bot.message_handler(content_types=['text'], func=lambda message: message.text and not message.text.startswith('/'))
def handle_order_name(message):
    if message.chat.id in user_data and 'waiting_for_order' in user_data[message.chat.id]:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ –∏–º–µ–Ω–∏
        orders = Orders.objects.filter(name=message.text)
        if orders.exists():
            order = orders.first()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            user_data[message.chat.id] = {'chosen_order_id': order.id}
            bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω –∑–∞–∫–∞–∑: {order.name}")
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        else:
            bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        # –£–¥–∞–ª—è–µ–º –∫–ª—é—á 'waiting_for_order', –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user_data[message.chat.id].pop('waiting_for_order', None)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞)
        if message.chat.id in user_data and 'chosen_order_id' in user_data[message.chat.id]:
            order_id = user_data[message.chat.id]['chosen_order_id']
            order = Orders.objects.get(pk=order_id)
            article = message.text
            products = Products.objects.filter(order=order, article=article)
            if products.exists():
                product = products.first()
                bot.send_message(message.chat.id,
                                 f"–ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω:\n–ê—Ä—Ç–∏–∫—É–ª: {product.article}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.quantity} —à—Ç—É–∫\n–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {product.unit_price} RUB\n–í–µ—Å: {product.weight} –∫–≥\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {product.amount} RUB")
            else:
                bot.send_message(message.chat.id, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ)
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    pass  # Not needed in this scenario


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)